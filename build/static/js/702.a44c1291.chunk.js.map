{"version":3,"file":"static/js/702.a44c1291.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/Products/ProductForm.module.css?d545","components/Products/ProductForm.js","components/UI/PageHeading.js","pages/admin/NewProduct.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"product-form\":\"ProductForm_product-form__f+BNw\",\"form-control\":\"ProductForm_form-control__iyIG+\",\"invalid\":\"ProductForm_invalid__uONdg\",\"actions\":\"ProductForm_actions__q0l40\",\"toggle\":\"ProductForm_toggle__QiuCm\"};","import { useRef, useState } from 'react';\r\n\r\nimport classes from './ProductForm.module.css';\r\n\r\nconst isEmpty = (value) => value.trim() === '';\r\nconst isZero = (value) => +value <= 0;\r\n\r\nfunction ProductForm({\r\n  isEdit,\r\n\r\n  loadedCategories,\r\n  onCheckDuplicateTitle,\r\n  titleIsDuplicate,\r\n  onSaveProduct,\r\n  product,\r\n}) {\r\n  const [formInputsValidity, setFormInputsValidity] = useState({\r\n    titleIsDuplicate: false,\r\n    title: true,\r\n    imageUrl: true,\r\n    description: true,\r\n    price: true,\r\n    brand: true,\r\n  });\r\n\r\n  const categoryInputRef = useRef();\r\n  const titleInputRef = useRef();\r\n  const imageUrlInputRef = useRef();\r\n  const descriptionInputRef = useRef();\r\n  const priceInputRef = useRef();\r\n  const brandInputRef = useRef();\r\n  const availabilityInputRef = useRef();\r\n  const infoInputRef = useRef();\r\n  let editProduct;\r\n  if (product) {\r\n    editProduct = { ...product };\r\n  } else {\r\n    editProduct = {\r\n      category: '',\r\n      title: '',\r\n      imageUrl: '',\r\n      description: '',\r\n      price: 0.0,\r\n      brand: '',\r\n      availability: null,\r\n    };\r\n  }\r\n\r\n  function formSubmissionHandler(event) {\r\n    event.preventDefault();\r\n    const selectedCategoryId = categoryInputRef.current.value;\r\n    const enteredTitle = titleInputRef.current.value;\r\n    const enteredImageUrl = imageUrlInputRef.current.value;\r\n    const enteredDescription = descriptionInputRef.current.value;\r\n    const enteredPrice = priceInputRef.current.value;\r\n    const enteredBrand = brandInputRef.current.value;\r\n    const checkedAvailability = availabilityInputRef.current.checked;\r\n    const enteredInfo = infoInputRef.current.value;\r\n\r\n    const enteredTitleIsDuplicate = !titleIsDuplicate;\r\n    const enteredTitleIsValid = !isEmpty(enteredTitle);\r\n    const enteredImageUrlIsValid = !isEmpty(enteredImageUrl);\r\n    const enteredDescriptionIsValid = !isEmpty(enteredDescription);\r\n    const enteredPriceIsValid = !isZero(enteredPrice);\r\n    const enteredBrandIsValid = !isEmpty(enteredBrand);\r\n\r\n    const formIsValid =\r\n      enteredTitleIsDuplicate &&\r\n      enteredTitleIsValid &&\r\n      enteredImageUrlIsValid &&\r\n      enteredDescriptionIsValid &&\r\n      enteredPriceIsValid &&\r\n      enteredBrandIsValid;\r\n\r\n    setFormInputsValidity({\r\n      duplicateTitle: enteredTitleIsDuplicate,\r\n      title: enteredTitleIsValid,\r\n      imageUrl: enteredImageUrlIsValid,\r\n      description: enteredDescriptionIsValid,\r\n      price: enteredPriceIsValid,\r\n      brand: enteredBrandIsValid,\r\n    });\r\n\r\n    if (!formIsValid) return;\r\n\r\n    const updatedProduct = {\r\n      category: selectedCategoryId,\r\n      title: enteredTitle,\r\n      imageUrl: enteredImageUrl,\r\n      description: enteredDescription,\r\n      price: +enteredPrice,\r\n      brand: enteredBrand,\r\n      availability: checkedAvailability,\r\n      info: enteredInfo,\r\n    };\r\n\r\n    onSaveProduct(updatedProduct);\r\n  }\r\n\r\n  function titleBlurHandler(event) {\r\n    const title = titleInputRef.current.value;\r\n    const categoryId = categoryInputRef.current.value;\r\n\r\n    onCheckDuplicateTitle({\r\n      title: title,\r\n      categoryId: categoryId,\r\n    });\r\n  }\r\n\r\n  if (titleIsDuplicate) {\r\n    titleInputRef.current.focus();\r\n  }\r\n\r\n  const titleInputClasses =\r\n    formInputsValidity.title && !titleIsDuplicate\r\n      ? classes['form-control']\r\n      : `${classes['form-control']} ${classes['invalid']}`;\r\n\r\n  const imageUrlInputClasses = formInputsValidity.imageUrl\r\n    ? classes['form-control']\r\n    : `${classes['form-control']} ${classes['invalid']}`;\r\n\r\n  const descriptionInputClasses = formInputsValidity.description\r\n    ? classes['form-control']\r\n    : `${classes['form-control']} ${classes['invalid']}`;\r\n\r\n  const priceInputClasses = formInputsValidity.price\r\n    ? classes['form-control']\r\n    : `${classes['form-control']} ${classes['invalid']}`;\r\n\r\n  const brandInputClasses = formInputsValidity.brand\r\n    ? classes['form-control']\r\n    : `${classes['form-control']} ${classes['invalid']}`;\r\n\r\n  return (\r\n    <section className={classes['product-form']}>\r\n      <form onSubmit={formSubmissionHandler}>\r\n        <div className={classes['form-control']}>\r\n          <label htmlFor='categories'>Select Category</label>\r\n          <select\r\n            id='categories'\r\n            ref={categoryInputRef}\r\n            disabled={isEdit ? true : false}\r\n            defaultValue={editProduct.category}\r\n          >\r\n            {loadedCategories.map((category) => (\r\n              <option key={category.id} value={category.id}>\r\n                {category.title}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        <div className={titleInputClasses}>\r\n          <label htmlFor='title'>Title</label>\r\n          <input\r\n            type='text'\r\n            id='title'\r\n            ref={titleInputRef}\r\n            onBlur={titleBlurHandler}\r\n            disabled={isEdit ? true : false}\r\n            defaultValue={editProduct.title}\r\n          />\r\n          {!formInputsValidity.title && <p>Title not entered</p>}\r\n          {titleIsDuplicate && <p>Duplicate Title not allowed</p>}\r\n        </div>\r\n\r\n        <div className={imageUrlInputClasses}>\r\n          <label htmlFor='imageUrl'>Image Url</label>\r\n          <input\r\n            type='text'\r\n            id='imageUrl'\r\n            ref={imageUrlInputRef}\r\n            defaultValue={editProduct.imageUrl}\r\n          />\r\n          {!formInputsValidity.imageUrl && <p>ImageUrl not entered</p>}\r\n        </div>\r\n\r\n        <div className={descriptionInputClasses}>\r\n          <label htmlFor='description'>Description</label>\r\n          <input\r\n            type='text'\r\n            id='description'\r\n            ref={descriptionInputRef}\r\n            defaultValue={editProduct.description}\r\n          />\r\n          {!formInputsValidity.description && <p>Description not entered</p>}\r\n        </div>\r\n\r\n        <div className={priceInputClasses}>\r\n          <label htmlFor='price'>Price</label>\r\n          <input\r\n            type='number'\r\n            id='price'\r\n            ref={priceInputRef}\r\n            step='0.01'\r\n            defaultValue={editProduct.price}\r\n          />\r\n          {!formInputsValidity.price && <p>Price not entered</p>}\r\n        </div>\r\n\r\n        <div className={brandInputClasses}>\r\n          <label htmlFor='brand'>Brand</label>\r\n          <input\r\n            type='text'\r\n            id='brand'\r\n            ref={brandInputRef}\r\n            defaultValue={editProduct.brand}\r\n          />\r\n          {!formInputsValidity.brand && <p>Description not entered</p>}\r\n        </div>\r\n\r\n        <div className={classes['form-control']}>\r\n          <label>\r\n            Availability\r\n            <input\r\n              type='checkbox'\r\n              name='availablity'\r\n              ref={availabilityInputRef}\r\n              defaultChecked={editProduct.availability}\r\n            />\r\n          </label>\r\n        </div>\r\n\r\n        <div className={classes['form-control']}>\r\n          <label htmlFor='info'>Info</label>\r\n          <textarea\r\n            rows='5'\r\n            cols='40'\r\n            type='text'\r\n            id='info'\r\n            ref={infoInputRef}\r\n            defaultValue={editProduct.info}\r\n          />\r\n        </div>\r\n\r\n        <div className={classes.actions}>\r\n          <button>{isEdit ? 'Update Product' : 'Add Product'}</button>\r\n        </div>\r\n      </form>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default ProductForm;\r\n","function PageHeading({ children, left }) {\r\n  const styles = {\r\n    font: 'inherit',\r\n    fontSize: '24px',\r\n    fontWeight: 'normal',\r\n    textAlign: left ? 'left' : 'center',\r\n    color: '#444',\r\n  };\r\n\r\n  return <h1 style={styles}>{children}</h1>;\r\n}\r\n\r\nexport default PageHeading;\r\n","import { useState } from 'react';\r\nimport { useRouteLoaderData, useNavigate } from 'react-router-dom';\r\n\r\nimport {\r\n  getAllCategories,\r\n  checkDuplicateProductTitle,\r\n  addProduct,\r\n} from '../../lib/api';\r\n\r\nimport useHttp from '../../hooks/useHttp';\r\n\r\nimport ProductForm from '../../components/Products/ProductForm';\r\nimport PageHeading from '../../components/UI/PageHeading';\r\nimport Modal from '../../components/UI/Modal';\r\nimport Button from '../../components/UI/Button';\r\n\r\nfunction NewProductPage() {\r\n  const loadedCategories = useRouteLoaderData('loaded-categories');\r\n  const [titleIsDuplicate, setTitleIsDuplicate] = useState();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const {\r\n    sendRequest: addNewProduct,\r\n    status,\r\n    data: result,\r\n    error,\r\n  } = useHttp(addProduct, false);\r\n\r\n  function checkDuplicateTitleHandler(newProductData) {\r\n    let isDuplicate;\r\n    async function checkDuplicate() {\r\n      isDuplicate = await checkDuplicateProductTitle(newProductData);\r\n      setTitleIsDuplicate(isDuplicate);\r\n    }\r\n\r\n    checkDuplicate();\r\n  }\r\n\r\n  function addNewProductHandler(newProduct) {\r\n    addNewProduct(newProduct);\r\n  }\r\n\r\n  function closeHandler() {\r\n    navigate('/admin/collections/all', { replace: true });\r\n  }\r\n\r\n  let message;\r\n  if (status === 'pending') {\r\n    message = <p>Saving Product...</p>;\r\n  }\r\n  if (status === 'error') {\r\n    message = <p>{error}</p>;\r\n  }\r\n\r\n  if (status === 'completed') {\r\n    message = (\r\n      <>\r\n        <p>Product Saved successfully!</p>\r\n        <p>New Product Id: {result.productId}</p>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeading>New Product Page</PageHeading>\r\n      {message && (\r\n        <Modal>\r\n          {message}\r\n          <Button onClick={closeHandler} disabled={status === 'pending'}>\r\n            OK\r\n          </Button>\r\n        </Modal>\r\n      )}\r\n      <ProductForm\r\n        loadedCategories={loadedCategories}\r\n        onCheckDuplicateTitle={checkDuplicateTitleHandler}\r\n        titleIsDuplicate={titleIsDuplicate}\r\n        onSaveProduct={addNewProductHandler}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NewProductPage;\r\n\r\nexport async function loader() {\r\n  return await getAllCategories();\r\n}\r\n"],"names":["isEmpty","value","trim","editProduct","isEdit","loadedCategories","onCheckDuplicateTitle","titleIsDuplicate","onSaveProduct","product","useState","title","imageUrl","description","price","brand","formInputsValidity","setFormInputsValidity","categoryInputRef","useRef","titleInputRef","imageUrlInputRef","descriptionInputRef","priceInputRef","brandInputRef","availabilityInputRef","infoInputRef","category","availability","current","focus","titleInputClasses","classes","imageUrlInputClasses","descriptionInputClasses","priceInputClasses","brandInputClasses","className","onSubmit","event","preventDefault","selectedCategoryId","enteredTitle","enteredImageUrl","enteredDescription","enteredPrice","enteredBrand","checkedAvailability","checked","enteredInfo","enteredTitleIsDuplicate","enteredTitleIsValid","enteredImageUrlIsValid","enteredDescriptionIsValid","enteredPriceIsValid","enteredBrandIsValid","formIsValid","duplicateTitle","info","htmlFor","id","ref","disabled","defaultValue","map","type","onBlur","categoryId","step","name","defaultChecked","rows","cols","children","styles","font","fontSize","fontWeight","textAlign","left","color","style","loader","getAllCategories","message","useRouteLoaderData","setTitleIsDuplicate","navigate","useNavigate","useHttp","addProduct","addNewProduct","sendRequest","status","result","data","error","productId","onClick","replace","newProductData","isDuplicate","checkDuplicateProductTitle","checkDuplicate","newProduct"],"sourceRoot":""}