{"version":3,"file":"static/js/961.6315580c.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","hooks/useInput.js","components/Auth/AuthForm.js","pages/Authentication.js","webpack://react-complete-guide/./src/components/Auth/AuthForm.module.css?0751"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__AxeL7\"};","import React from 'react';\r\n\r\nimport classes from './Card.module.css';\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className={`${classes.card} ${props.className}`}>{props.children}</div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import { useReducer } from 'react';\r\n\r\nconst initialInputState = {\r\n  value: '',\r\n  isTouched: false,\r\n};\r\n\r\nfunction inputStateReducer(state, action) {\r\n  if (action.type === 'INPUT') {\r\n    return { value: action.value, isTouched: state.isTouched };\r\n  }\r\n\r\n  if (action.type === 'BLUR') {\r\n    return { isTouched: true, value: state.value };\r\n  }\r\n\r\n  if (action.type === 'RESET') {\r\n    return { isTouched: false, value: '' };\r\n  }\r\n\r\n  return initialInputState;\r\n}\r\n\r\nfunction useInput(validateValue) {\r\n  const [inputState, dispatch] = useReducer(\r\n    inputStateReducer,\r\n    initialInputState\r\n  );\r\n\r\n  const valueIsValid = validateValue(inputState.value);\r\n  const hasError = !valueIsValid && inputState.isTouched;\r\n\r\n  function valueChangeHandler(event) {\r\n    dispatch({ type: 'INPUT', value: event.target.value });\r\n  }\r\n\r\n  function inputBlurHandler(event) {\r\n    dispatch({ type: 'BLUR' });\r\n  }\r\n\r\n  function reset() {\r\n    dispatch({ type: 'RESET' });\r\n  }\r\n\r\n  return {\r\n    value: inputState.value,\r\n    hasError,\r\n    valueChangeHandler,\r\n    inputBlurHandler,\r\n    isValid: valueIsValid,\r\n    reset,\r\n  };\r\n}\r\n\r\nexport default useInput;\r\n","import {\r\n  Form,\r\n  Link,\r\n  useSearchParams,\r\n  useActionData,\r\n  useNavigation,\r\n} from 'react-router-dom';\r\n\r\nimport useInput from '../../hooks/useInput';\r\nimport Card from '../UI/Card';\r\n\r\nimport classes from './AuthForm.module.css';\r\n\r\nconst validEmail = (email) => email.includes('@');\r\nconst validPassword = (password) => password.trim().length > 5;\r\n\r\nfunction AuthForm() {\r\n  const {\r\n    value: enteredEmail,\r\n    isValid: enteredEmailIsValid,\r\n    hasError: emailInputHasError,\r\n    valueChangeHandler: emailChangeHandler,\r\n    inputBlurHandler: emailBlurHandler,\r\n    // reset: resetEmailInput,\r\n  } = useInput(validEmail);\r\n\r\n  const {\r\n    value: enteredPassword,\r\n    isValid: enteredPasswordIsValid,\r\n    hasError: passwordInputHasError,\r\n    valueChangeHandler: passwordChangeHandler,\r\n    inputBlurHandler: passwordBlurHandler,\r\n    // reset: resetPasswordInput,\r\n  } = useInput(validPassword);\r\n\r\n  const comparePassword = (confirmPassword) => {\r\n    const inputPassword = enteredPasswordIsValid && enteredPassword;\r\n    return confirmPassword === inputPassword;\r\n  };\r\n\r\n  const {\r\n    value: confirmPassword,\r\n    isValid: confirmPasswordIsValid,\r\n    hasError: confirmPasswordInputHasError,\r\n    valueChangeHandler: confirmPasswordChangeHandler,\r\n    inputBlurHandler: confirmPasswordBlurHandler,\r\n    // reset: resetConfirmPasswordInput,\r\n  } = useInput(comparePassword);\r\n\r\n  const [searchParams] = useSearchParams();\r\n  const isLogin = searchParams.get('mode') === 'login';\r\n\r\n  const data = useActionData();\r\n  if (data) {\r\n    console.log('data ', data);\r\n    Object.values(data.error.errors).map((err) => console.log(err.message));\r\n  }\r\n  const navigation = useNavigation();\r\n  const isSubmitting = navigation.state === 'submitting';\r\n\r\n  let formIsValid = false;\r\n  if (enteredEmailIsValid && enteredPasswordIsValid) {\r\n    if (isLogin) {\r\n      formIsValid = true;\r\n    } else if (confirmPasswordIsValid) {\r\n      formIsValid = true;\r\n    }\r\n  }\r\n\r\n  const emailInputClasses = !emailInputHasError\r\n    ? classes['form-control']\r\n    : `${classes['form-control']} ${classes['invalid']}`;\r\n\r\n  const passwordInputClasses = !passwordInputHasError\r\n    ? classes['form-control']\r\n    : `${classes['form-control']} ${classes['invalid']}`;\r\n\r\n  const confirmPasswordClasses = !confirmPasswordInputHasError\r\n    ? classes['form-control']\r\n    : `${classes['form-control']} ${classes['invalid']}`;\r\n\r\n  return (\r\n    <Card className={classes.wrapper}>\r\n      <Form method='post' className={classes.auth}>\r\n        <h1>{isLogin ? 'Login' : 'Sign up'}</h1>\r\n\r\n        <div className={classes.errors}>\r\n          {data && data.error && (\r\n            <ul>\r\n              {Object.values(data.error.errors).map((err) => (\r\n                <li key={err}>{err.message}</li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </div>\r\n\r\n        {/* {data && data.error && <p>{data.error.message}</p>} */}\r\n\r\n        <div className={emailInputClasses}>\r\n          <label htmlFor='email'>E-Mail</label>\r\n          <input\r\n            name='email'\r\n            type='email'\r\n            id='email'\r\n            onChange={emailChangeHandler}\r\n            onBlur={emailBlurHandler}\r\n            value={enteredEmail}\r\n          />\r\n          {emailInputHasError && <p>Invalid email entered</p>}\r\n        </div>\r\n\r\n        <div className={passwordInputClasses}>\r\n          <label htmlFor='password'>Password</label>\r\n          <input\r\n            name='password'\r\n            type='password'\r\n            id='password'\r\n            onChange={passwordChangeHandler}\r\n            onBlur={passwordBlurHandler}\r\n            value={enteredPassword}\r\n          />\r\n          {passwordInputHasError && <p>Password must have min 6 chars</p>}\r\n        </div>\r\n\r\n        {!isLogin && (\r\n          <div className={confirmPasswordClasses}>\r\n            <label htmlFor='confirmPassword'>Confirm Password</label>\r\n            <input\r\n              type='password'\r\n              id='confirmPassword'\r\n              onChange={confirmPasswordChangeHandler}\r\n              onBlur={confirmPasswordBlurHandler}\r\n              value={confirmPassword}\r\n            />\r\n            {confirmPasswordInputHasError && (\r\n              <p>Confirm password does not match </p>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        <div className={classes.actions}>\r\n          {!false && (\r\n            <button disabled={!formIsValid || isSubmitting}>\r\n              {isSubmitting\r\n                ? 'Submitting...'\r\n                : isLogin\r\n                ? 'Login'\r\n                : 'Create Account'}\r\n            </button>\r\n          )}\r\n\r\n          {/* {isSubmitting && <p>Sending request...</p>} */}\r\n\r\n          <Link\r\n            to={`?mode=${isLogin ? 'signup' : 'login'}`}\r\n            className={classes['toggle']}\r\n          >\r\n            {isLogin ? 'Create new user' : 'Login'}\r\n          </Link>\r\n        </div>\r\n      </Form>\r\n    </Card>\r\n  );\r\n}\r\nexport default AuthForm;\r\n","import { json, redirect } from 'react-router-dom';\r\n\r\nimport { LOGIN_URL, SIGNUP_URL } from '../lib/api';\r\nimport AuthForm from '../components/Auth/AuthForm';\r\n\r\nfunction AuthenticationPage() {\r\n  return <AuthForm />;\r\n}\r\n\r\nexport default AuthenticationPage;\r\n\r\nexport async function action({ request }) {\r\n  const searchParams = new URL(request.url).searchParams;\r\n\r\n  const mode = searchParams.get('mode') || 'login';\r\n  let url =\r\n    mode === 'login'\r\n      ? LOGIN_URL\r\n      : mode === 'signup'\r\n      ? SIGNUP_URL\r\n      : 'Wrong Mode';\r\n\r\n  if (mode !== 'login' && mode !== 'signup') {\r\n    throw json({ message: 'Unsupported mode' }, { status: 422 });\r\n  }\r\n\r\n  const data = await request.formData();\r\n  const authData = {\r\n    email: data.get('email'),\r\n    password: data.get('password'),\r\n    returnSecureToken: true,\r\n  };\r\n\r\n  const response = await fetch(url, {\r\n    method: 'POST',\r\n    body: JSON.stringify(authData),\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n\r\n  if (response.status === 400) {\r\n    return response;\r\n  }\r\n\r\n  if (!response.ok) {\r\n    throw json({ message: 'Could not authenticate user' }, { status: 500 });\r\n  }\r\n\r\n  const resData = await response.json();\r\n\r\n  const token = resData.idToken;\r\n  const userId = resData.localId;\r\n  const userEmail = resData.email;\r\n  localStorage.setItem('token', token);\r\n  localStorage.setItem('userId', userId);\r\n  localStorage.setItem('userEmail', userEmail);\r\n\r\n  const expiration = new Date();\r\n  expiration.setHours(expiration.getHours() + 1);\r\n  localStorage.setItem('expiration', expiration.toISOString());\r\n\r\n  return redirect('/');\r\n}\r\n\r\n// for 3sec testing\r\n// expiration.setMilliseconds(expiration.getMilliseconds() + 3000);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"AuthForm_wrapper__+gqAD\",\"auth\":\"AuthForm_auth__i9NeK\",\"errors\":\"AuthForm_errors__8i5MD\",\"form-control\":\"AuthForm_form-control__bSr9b\",\"invalid\":\"AuthForm_invalid__gE4mt\",\"actions\":\"AuthForm_actions__zfFG6\",\"toggle\":\"AuthForm_toggle__zEayz\"};"],"names":["props","className","classes","children","initialInputState","value","isTouched","inputStateReducer","state","action","type","validateValue","useReducer","inputState","dispatch","valueIsValid","hasError","valueChangeHandler","event","target","inputBlurHandler","isValid","reset","validEmail","email","includes","validPassword","password","trim","length","useInput","enteredEmail","enteredEmailIsValid","emailInputHasError","emailChangeHandler","emailBlurHandler","enteredPassword","enteredPasswordIsValid","passwordInputHasError","passwordChangeHandler","passwordBlurHandler","confirmPassword","confirmPasswordIsValid","confirmPasswordInputHasError","confirmPasswordChangeHandler","confirmPasswordBlurHandler","useSearchParams","isLogin","get","data","useActionData","console","log","Object","values","error","errors","map","err","message","isSubmitting","useNavigation","formIsValid","emailInputClasses","passwordInputClasses","confirmPasswordClasses","Card","method","htmlFor","name","id","onChange","onBlur","disabled","to","request","searchParams","URL","url","mode","LOGIN_URL","SIGNUP_URL","json","status","formData","authData","returnSecureToken","fetch","body","JSON","stringify","headers","response","ok","resData","token","idToken","userId","localId","userEmail","localStorage","setItem","expiration","Date","setHours","getHours","toISOString","redirect"],"sourceRoot":""}